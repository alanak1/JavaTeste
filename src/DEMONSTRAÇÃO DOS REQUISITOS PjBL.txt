# üéì DEMONSTRA√á√ÉO DOS REQUISITOS PjBL


üîê Logins para testar:

Admin: admin@sistema.com / 123456
Aluno: joao@email.com / 123
Professor: maria@email.com / 123
Coordenador: carlos@email.com / 123




## ‚úÖ **COMO MOSTRAR CADA REQUISITO**

### **1Ô∏è‚É£ ENCAPSULAMENTO** 
**üìç Onde mostrar:** Qualquer classe
```java
// Usuario.java - Atributos privados
private String nome;     // ‚Üê ENCAPSULADO
private String email;    // ‚Üê ENCAPSULADO

// Acesso controlado via m√©todos
public String getNome() { return nome; }  // ‚Üê INTERFACE P√öBLICA
```

### **2Ô∏è‚É£ MAIS DE 5 CLASSES**
**üìç Onde mostrar:** Estrutura do projeto
```
‚úÖ 9 CLASSES IMPLEMENTADAS:
1. Usuario.java          (classe abstrata)
2. Aluno.java           (heran√ßa)
3. Professor.java       (heran√ßa) 
4. Coordenador.java     (heran√ßa)
5. Administrador.java   (heran√ßa)
6. Frequencia.java      (associa√ß√£o)
7. SerializadorJava.java (persist√™ncia)
8. Excecao.java         (exception)
9. Main.java            (interface)
```

### **3Ô∏è‚É£ CLASSE ABSTRATA**
**üìç Onde mostrar:** Usuario.java linha 15
```java
public abstract class Usuario implements Serializable {
    //         ‚Üë
    //    CLASSE ABSTRATA - n√£o pode ser instanciada
```

### **4Ô∏è‚É£ M√âTODOS ABSTRATOS**
**üìç Onde mostrar:** Usuario.java linhas 50-65
```java
// M√âTODOS ABSTRATOS - devem ser implementados pelas subclasses
public abstract String[] getPermissoes();
public abstract String getTipoUsuario();
public abstract boolean podeEditarFrequencia();
public abstract boolean podeGerenciarUsuarios();
public abstract String gerarRelatorioPersonalizado();
```

### **5Ô∏è‚É£ 10+ ATRIBUTOS E M√âTODOS**
**üìç Onde mostrar:** Qualquer classe
```java
// CONTAGEM R√ÅPIDA:
Usuario:        8 atributos + 15 m√©todos
Aluno:          4 atributos + 12 m√©todos  
Professor:      3 atributos + 10 m√©todos
Frequencia:     7 atributos + 15 m√©todos
// TOTAL: 50+ atributos e 100+ m√©todos
```

### **6Ô∏è‚É£ DUAS RELA√á√ïES DE HERAN√áA**
**üìç Onde mostrar:** Qualquer subclasse
```java
// HERAN√áA 1: Usuario ‚Üí Aluno
public class Aluno extends Usuario {
//                     ‚Üë
//               HERDA DE Usuario

// HERAN√áA 2: Usuario ‚Üí Professor  
public class Professor extends Usuario {
//                        ‚Üë
//                  HERDA DE Usuario
```

### **7Ô∏è‚É£ M√âTODO SOBRESCRITO**
**üìç Onde mostrar:** Aluno.java linha 89
```java
@Override  // ‚Üê ANOTA√á√ÉO DE SOBRESCRITA
public String getDescricaoCompleta() {
    return String.format("Aluno: %s (Mat: %s)...", nome, matricula);
    //     ‚Üë
    // IMPLEMENTA√á√ÉO ESPEC√çFICA DO ALUNO
}
```

### **8Ô∏è‚É£ CHAMADA POLIM√ìRFICA**
**üìç Onde mostrar:** Console (autom√°tico) ou Interface ‚Üí Relat√≥rios ‚Üí "Demonstrar Polimorfismo"
```java
// MESMO M√âTODO, COMPORTAMENTOS DIFERENTES:
Usuario usuario1 = new Aluno(...);
Usuario usuario2 = new Professor(...);

usuario1.getTipoUsuario();  // ‚Üí "Aluno"
usuario2.getTipoUsuario();  // ‚Üí "Professor"
//       ‚Üë
//   POLIMORFISMO EM A√á√ÉO!
```

### **9Ô∏è‚É£ ASSOCIA√á√ÉO ENTRE CLASSES**
**üìç Onde mostrar:** Frequencia.java linhas 25-30
```java
public class Frequencia {
    private int alunoId;        // ‚Üê ASSOCIA√á√ÉO com Usuario
    private int registradoPorId; // ‚Üê ASSOCIA√á√ÉO com Usuario
    //          ‚Üë
    //    RELACIONAMENTO ENTRE CLASSES
}
```

### **üîü COLE√á√ÉO DE OBJETOS**
**üìç Onde mostrar:** Qualquer lugar que use List
```java
// SerializadorJava.java
List<Usuario> usuarios = new ArrayList<>();     // ‚Üê COLE√á√ÉO
List<Frequencia> frequencias = new ArrayList<>(); // ‚Üê COLE√á√ÉO

// Opera√ß√µes com cole√ß√µes
usuarios.stream().filter(u -> u instanceof Aluno).count();
```

### **1Ô∏è‚É£1Ô∏è‚É£ EXCEPTION CUSTOMIZADA**
**üìç Onde mostrar:** Excecao.java ou Interface ‚Üí Sistema ‚Üí "Testar Exce√ß√µes"
```java
// EXCEPTION DERIVADA DE Exception
public class Excecao extends Exception {
//                      ‚Üë
//            HERDA DE Exception

// M√âTODOS ESPEC√çFICOS
public static Excecao administradorUnico(String nome) {
    return new Excecao("Administrador", nome, "√∫ltimo admin");
}
```

### **1Ô∏è‚É£2Ô∏è‚É£ INTERFACE GR√ÅFICA**
**üìç Onde mostrar:** Executar Main.java
```java
// SWING COMPLETO:
‚úÖ Tela de Login
‚úÖ Tela do Aluno (espec√≠fica)
‚úÖ Tela do Professor (espec√≠fica)  
‚úÖ Tela do Admin (espec√≠fica)
‚úÖ Funcionalidades por perfil
```

### **1Ô∏è‚É£3Ô∏è‚É£ LEITURA DE CSV**
**üìç Onde mostrar:** SerializadorJava.java linha 145 ou pasta "dados"
```java
// M√âTODO QUE L√ä CSV
private List<Usuario> carregarUsuariosCSV() throws Exception {
    try (BufferedReader reader = new BufferedReader(new FileReader(arquivoCSV))) {
        String linha = reader.readLine(); // Cabe√ßalho
        while ((linha = reader.readLine()) != null) {
            // PROCESSA LINHA DO CSV
        }
    }
}

// ARQUIVOS CRIADOS:
dados/usuarios.csv     ‚Üê ARQUIVO CSV LEG√çVEL
dados/frequencias.csv  ‚Üê ARQUIVO CSV LEG√çVEL
```

### **1Ô∏è‚É£4Ô∏è‚É£ OBJETOS PERSISTENTES**
**üìç Onde mostrar:** SerializadorJava.java linha 45 ou pasta "dados"
```java
// SERIALIZA√á√ÉO BIN√ÅRIA
try (ObjectOutputStream oos = new ObjectOutputStream(...)) {
    oos.writeObject(usuarios); // ‚Üê SALVA OBJETOS COMPLETOS
}

// ARQUIVOS CRIADOS:
dados/usuarios.dat     ‚Üê SERIALIZA√á√ÉO BIN√ÅRIA
dados/frequencias.dat  ‚Üê SERIALIZA√á√ÉO BIN√ÅRIA
```

## üéØ **ROTEIRO DE APRESENTA√á√ÉO (5 MIN)**

### **1. Mostrar Interface (1 min)**
- Executar Main.java
- Login com admin@sistema.com / 123456
- Navegar pelas abas mostrando funcionalidades

### **2. Demonstrar Polimorfismo (1 min)**
- Aba "Relat√≥rios" ‚Üí "Demonstrar Polimorfismo"
- Explicar como mesmo m√©todo tem comportamentos diferentes

### **3. Mostrar Exce√ß√µes (1 min)**
- Aba "Sistema" ‚Üí "Testar Exce√ß√µes"
- Tentar excluir admin para mostrar exce√ß√£o customizada

### **4. Verificar Requisitos (1 min)**
- Aba "Sistema" ‚Üí "Verificar Requisitos"
- Mostrar que todos os 14 est√£o ‚úÖ ATENDIDOS

### **5. Mostrar Arquivos (1 min)**
- Abrir pasta "dados" criada automaticamente
- Mostrar .dat (bin√°rio) e .csv (leg√≠vel)
- Abrir .csv no bloco de notas

## üí° **DICAS PARA APRESENTA√á√ÉO**

### **‚úÖ PONTOS FORTES PARA DESTACAR:**
- **Todos os 14 requisitos implementados**
- **Interface profissional e funcional**
- **Demonstra√ß√£o autom√°tica dos conceitos**
- **C√≥digo bem estruturado e comentado**
- **Persist√™ncia robusta (bin√°rio + CSV)**

### **üéØ SE PERGUNTAREM:**
- **"Onde est√° o polimorfismo?"** ‚Üí Console + Interface ‚Üí Relat√≥rios
- **"Como funciona a heran√ßa?"** ‚Üí Usuario ‚Üí 4 subclasses
- **"Qual √© a exce√ß√£o customizada?"** ‚Üí Excecao.java + demonstra√ß√£o
- **"Onde est√£o os dados persistentes?"** ‚Üí Pasta dados/ 
- **"Como funciona o CSV?"** ‚Üí Abrir dados/usuarios.csv

### **üèÜ FRASE FINAL:**
*"Este projeto demonstra todos os conceitos fundamentais de POO de forma pr√°tica e visual, em uma aplica√ß√£o real e funcional."*